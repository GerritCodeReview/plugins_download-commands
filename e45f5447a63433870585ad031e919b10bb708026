{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dddaf30c_cbb5eab5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2023-06-12T13:46:39Z",
      "side": 1,
      "message": "Why don\u0027t you just use the checkout command in this case?",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 12,
        "endChar": 27
      },
      "revId": "e45f5447a63433870585ad031e919b10bb708026",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "419a1a40_b848aa34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1161325
      },
      "writtenOn": "2023-06-12T20:42:49Z",
      "side": 1,
      "message": "This would work fine for someone who is fluent in git; however, `git checkout FETCH_HEAD` leads to a detached HEAD state this involves extra complexity. Of course, the clean way would be to create a branch.\n\nFor people who only use git occasionally, it is nice if a small set of commands is sufficient. In particular, I found that people use the `git cherry-pick` command from gerrit extensively (they prefer one or more cherry-picks over a single checkout). However, the fact that a new commit hash is always generated, does create some confusion, which I would like to address with this patch.\n\nThe goal here is just to make the default better suited for more use cases, it does not add any clever feature. Do you want me to reword the commit message?",
      "parentUuid": "dddaf30c_cbb5eab5",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 12,
        "endChar": 27
      },
      "revId": "e45f5447a63433870585ad031e919b10bb708026",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b8fd13d_6be07fe0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2023-06-13T08:35:03Z",
      "side": 1,
      "message": "\u003e This would work fine for someone who is fluent in git; however,\n\u003e `git checkout FETCH_HEAD` leads to a detached HEAD state this involves extra \n\u003e complexity.\n\nThis is the same for the cherry-pick command, isn\u0027t it?\n\n\n\u003e Of course, the clean way would be to create a branch.\n\nThere is already the \"branch\" command [1] that does exactly this. Maybe enable this command?\n\n[1] https://gerrit-review.git.corp.google.com/plugins/download-commands/Documentation/config.html#download.command\n\n\n\u003e For people who only use git occasionally, it is nice if a small set of\n\u003e commands is sufficient. In particular, I found that people use the\n\u003e `git cherry-pick` command from gerrit extensively (they prefer one or\n\u003e more cherry-picks over a single checkout). However, the fact that a new\n\u003e commit hash is always generated, does create some confusion, which I\n\u003e would like to address with this patch.\n\nIIUC the added --ff option only makes a difference if the current HEAD is the same as the parent of the cherry-pickâ€™ed commit [2]. I\u0027m not sure that people who only use git occasionally will be aware of this precondition, so for them it seems safer to use the existing checkout or branch commands, which work without precondition. With the cherry-pick --ff command they will still get a new commit created if locally they have checked out a commit that is not the parent commit of the cherry-picked commit, so trying to use this command to cherry-pick a (unmerged) patch from a colleague and then upload a new patch on top may actually disturb the change of the colleague. So I would expect that this rather adds more confusion for people that are not deeply familiar with git, because the behaviour of the command is different depending on what is checked out locally.\n\n[2] https://git-scm.com/docs/git-cherry-pick#Documentation/git-cherry-pick.txt---ff\n\n\u003e The goal here is just to make the default better suited for more use cases,\n\u003e it does not add any clever feature.\n\nSure, I\u0027m neither against nor in favour of adding this option. Just trying to understand why adding it is useful.\n\n\u003e Do you want me to reword the commit message?\n\nThanks, it would be nice to include why adding the --ff option to the \"cherry-pick\" command is preferred over just using the existing \"checkout\" and \"branch\" commands.\n\nSince I\u0027m not convinced enough (yet) to approve this, let\u0027s get the opinion of another maintainer. Hence adding Nasser as a reviewer.",
      "parentUuid": "419a1a40_b848aa34",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 12,
        "endChar": 27
      },
      "revId": "e45f5447a63433870585ad031e919b10bb708026",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70978779_4558c4d2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1161325
      },
      "writtenOn": "2023-06-13T12:59:24Z",
      "side": 1,
      "message": "Thank you for this background information! I will re-upload with a better commit message. Note that cherry-pick does not lead to a detached HEAD state.\n\n\u003e There is already the \"branch\" command [1] that does exactly this. Maybe enable this command?\n\nYes, we have \"branch\" and \"cherry-pick\" commands enabled. Some users prefer to use cherry-pick.\n\n\u003e So I would expect that this rather adds more confusion for people that are not deeply familiar with git, because the behaviour of the command is different depending on what is checked out locally.\n\nThis is hard for me to judge. I have seen someone carefully cherry-picking two subsequent patchsets and then adding his patchset on top of it -- he was surprised that this led to a rebase when pushing his patchset; having fast-forward would have eliminated this surprise. If he did the cherry-pick out-of-order, the commits would have changed indeed; however, I think he would not have been surprised by this.\n\nAnyway, I guess it is a balance between (a) providing the git-commands that are maximally helpful even if the non-optimal version, \"cherry-pick\", is used, and (b) steer users to learn the more appropriate version, \"branch\". IMO the main question for the reviewers is whether the projects leans towards (a) or (b).",
      "parentUuid": "2b8fd13d_6be07fe0",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 12,
        "endChar": 27
      },
      "revId": "e45f5447a63433870585ad031e919b10bb708026",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3708902b_2683d55e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2023-06-20T07:10:19Z",
      "side": 1,
      "message": "Thanks for updating the commit message. I\u0027m not having a strong opinion about this. Hence I would still like the opinion of another maintainer.",
      "parentUuid": "70978779_4558c4d2",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 12,
        "endChar": 27
      },
      "revId": "e45f5447a63433870585ad031e919b10bb708026",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86241dca_9b46ad7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1161325
      },
      "writtenOn": "2023-06-12T13:34:31Z",
      "side": 1,
      "message": "Hi, may I ask for your review here? Having fast-forward by default would have eliminated some confusions in our development team, because not everyone is deeply familiar with git...",
      "revId": "e45f5447a63433870585ad031e919b10bb708026",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}